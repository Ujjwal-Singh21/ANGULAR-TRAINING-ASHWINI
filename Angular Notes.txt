day-1
-----

important basic commands:
=========================

- angular installation  -> npm install -g @angular/cli@10 

- version check -> ng --version

- create angular app -> ng new testapp

- run it -> ng serve -o,  here (o is for browser instantiation)

- To clear cache -> npm cache clean --force

- un-install it -> npm uninstall -g @angular/cli

- install again -> npm install -g @angular/cli

- to create a component inside a folder, go to that folder then -> ng generate component test1

- https://stackblitz.com/edit/angular


---------------------------------------------------------------------------------------------

day-2
-----

Notes:
======

- FLOW => main.ts -> app.module.ts(container) -> app.component.ts(components) -> Child components.

- By default every component consist of four files
  
  - .ts file      -  for businesslogic
  - .css file     -  for CSS related stuffs
  - .html file    -  for presentation template purpose
  - .spec.ts file -  for testing purpose

- index.html is the ONLY file which basically gets served up in the browser.

- main.ts is the entry point, it has module name inside bootstrapModule(AppModule) -> 

- app.module.ts acts as a 'container/module' containing several components 
  (has declarations array and used to register components)

- then comes 'components' like app.component.ts having business logic and corresponding app.component.html
  having for presentation or UI logic.

- every component.ts file has a selector tag where we give it a unique name using which we can serve it up.

- like for eg app.component.ts has selector name as 'app-root' which is used inside index.html to serve it
  up in the browser.

- So we can simply say that app component is parent component generated by default.

- And whatever component we are going to create by ourselves hereafter is going to be child component
  of app component

- To establish the PARENT-CHILD relationship, we use the child component's selector name as tag inside
  the parent component's .html file, or so called presentation/template file.


for eg:
-------

- We create a Basics folder inside app folder.

- We move inside Basics folder

- we use 'ng generate component test1' command to create our own test1 component

- It automatically generates four files (.ts, .html, .css, .spec.ts) as mentioned above.

- then we go inside test1.component.ts and copy and select its selector name.

- then we go inside app.component.html file and paste it inside '<>' and use it as tag name .

- Hence parent child relationship is created between app and test1 successfully.


-------------------------------------------------------------------------------------------------------------

day-3
-----

Directives in Angular
=====================

- To conditionally render the dom elements based on certain condition we need directives.

- If we want to manupulate the dom layout/structure based on some condition, then definitely we need something
  more than normal HTML.

- Hence we have directives which helps us to put extra behaviours to dom elements.

- There are various types of directives.


1) Structural Directive
========================

- *ngIf -> its similar to an if condition

- *ngFor -> its similar to a for loop

- <ng-template> -> Its like the else part of *ngIf, and it gets executed only when if condition is false.
                -> To associate ngIf and <ng-template> we make use of 'template-reference-variable'.
                -> <ng - template #comments> </ ng - template>


- example code snippet
======================

class Product {
   id,name,description,quantity, comments[];
}


product: Product = new Product(101, 'Headphones', 'Wireless', 5, ['Nice', 'Amazing', 'Average']);


<div *ngIf = "product.comments.length == 0; else comments">
	<p> No Comments </p>
</div>


<ng-template #comments>
		
	<ul>
		<li *ngFor = "let comment of product.comments">
             {{comment}}
        </li>
    </ul>

<ng-template>


- Here since ngFor is used on <li> tag,

- <li> tag will be executed and rendered the number of times the for loop is going to run

- Which means basically for all elements inside comments array, <li> tag will get executed.



Parent to Child communication (property binding):
=================================================


 App <-
 Product(Parent) <- 
 ProductList (Contains products list and passes one by one to child) <- 
 ProductItem (Recieves and display each product from its parent 'ProductList Component')

Parent- In Parent template through property binding data is sent to child component.

Child - Variable in parent component is able to recieve data from parent component only if it is decorated with
        @Input() decorator, so import Input at the top from angular-core.


example:
--------

- In ProductList.component.ts -> We have productList array.

- In ProductList.component.html -> We have selector <ProductItem></ProductItem> as its child.

- Hence We will be sending data from Parent's html file to Child's ts file.

- Hence in Parent's html file We write as: 


<div class="container">
  <div class="row">

    <div class="col-md-2" *ngFor="let productElement of productList">
      <!-- parent to child data transfer - 
          put a logic to send the productElement to productItem component for display purpose -->
      <app-productitem [product]="productElement"></app-productitem>
    </div>
    
  </div>
</div>

- In Child's ts file we recieve it by annoating a variable with @Input()


import { Component, OnInit, Input } from '@angular/core';
import { Product } from 'src/shared/product.model';

@Component({
  selector: 'app-productitem',
  templateUrl: './productitem.component.html',
  styleUrls: ['./productitem.component.css']
})
export class ProductitemComponent implements OnInit {

  @Input() product:Product; //input prop i.e this will always recieve the value from parent component property

  constructor() { }

  ngOnInit(): void {
  }

}


- Then finally in Child's html file we use the recieved data from parent i.e) product

<div class="shadow-lg -3 mb-5 bg-white rounded">

    <div>
      <h4>{{ product.title }}</h4>
    </div>

    <span class="align-middle">
      <img [src]="product.imagepath" alt="{{ product.title }}" class="img-fluid" />
    </span>

    <div *ngIf="product.comments.length == 0; else comments">
      <p>No Comments</p>
    </div>

    <ng-template #comments>
      <strong> Comments </strong>
      <ul class="list-group list-group-flush">
        <li class="list-group-item" *ngFor="let comment of product.comments">
          {{ comment }}
        </li>
      </ul>
    </ng-template>
</div>


-------------------------------------------------------------------------------------------------------------------


day-4
-----

Two way communication:
======================

- ngModel, @Output, EventEmitter are newly introduced.

- Product component will have 2 childs now which are:

  1) ProductList
  2) ProductCreate

- So we place ProductCreate selector as tag in Product's html file and make it a child of Product component.

- We will take data from user for creating a Product object by using a form in ProductCreate html file.

- We then need to pass that data to ProductList sibling component's ts file.

- But we cannot pass the data directly, hence we will pass it through parent Product component.

- So flow of data will be from ProductCreate - to - Product then from Product - to - ProductList.

- So to create a form in ProductCreate ts file we declare four variables in its ts file first for title,
  description, imagepath and quantity.

- We also declare an onClick event handler method in ts file that creates a Product object inside it when the button
  is clicked because by then variables will be populated with data entered by user through form.

- To bind these variables and handler present in .ts file to the form input and button tag in html file we use
 'ngModel' directive and (click) respectively.

 - syntax: [(ngModel)] = 'title'

 - eg: <input type="text" class="form-control" [(ngModel)]="title" />

 - syntax: (click)="onAddNewProduct()"

 - eg: <button class="btn btn-primary mb-3" (click)="onAddNewProduct()"> Add New Product </button>

- To emit the data from CreateProduct to Product we make use of EventEmitter Object and @Output annotator
  and emit the created Product object using emit() function.

 - @Output() addProductEvent = new EventEmitter<Product>();

 - onAddNewProduct() {
    let newProduct = new Product(this.title, this.description, this.imagepath, this.quantity);
    this.addProductEvent.emit(newProduct);
  }


ProductCreate.component.html (form):
------------------------------------

<div class="container">
  <div class="row">

    <div class="mb-3">
      <label for="title" class="form-label">Title</label>
      <input type="text" class="form-control" [(ngModel)]="title" />
    </div>

    <div class="mb-3">
      <label for="description" class="form-label">Description</label>
      <input type="text" class="form-control" [(ngModel)]="description" />
    </div>

    <div class="mb-3">
      <label for="imagepath" class="form-label">ImageUrl</label>
      <input type="text" class="form-control" [(ngModel)]="imagepath" />
    </div>

    <div class="mb-3">
      <label for="quantity" class="form-label">Quantity</label>
      <input type="number" class="form-control" [(ngModel)]="quantity" />
    </div>

    <button class="btn btn-primary mb-3" (click)="onAddNewProduct()"> Add New Product </button>

  </div>
</div>



ProductCreate.component.ts (variables & onClick handler)
---------------------------------------------------------
import { Component, OnInit, Output, EventEmitter } from '@angular/core';
import { Product } from 'src/shared/product.model';

@Component({
  selector: 'app-productcreate',
  templateUrl: './productcreate.component.html',
  styleUrls: ['./productcreate.component.css']
})
export class ProductcreateComponent implements OnInit {

  // watch-here
  title: string;
  description: string;
  imagepath:string;
  quantity:number;

  // watch-here
  @Output() addProductEvent = new EventEmitter<Product>();

  constructor() { }

  ngOnInit(): void {
  }

  // watch-here
  onAddNewProduct() {
    let newProduct = new Product(this.title, this.description, this.imagepath, this.quantity);
    this.addProductEvent.emit(newProduct);
  }

}


- Since now the data is passed from ProductCreate to Product, we recieve it in Product's html file.

- The data was emitted with the variable named addProductEvent, so data is captured in Product's html file using
  same variable.

- Once we recieve the data in Product's html file, we pass it to its .ts file using a handler method where we have
  declared an empty array to store the recieved product object data and an handler to perform this data assignment.

- storeProducts: Product[] = [];

- onAddNewProduct (newProduct: Product) {
    this.storeProducts.push(newProduct)
    console.log(this.storeProducts)
  }


Product.component.html:
-----------------------

- <app-productcreate (addProductEvent)="onAddNewProduct($event)"></app-productcreate>


Product.component.ts:
---------------------

import { Component, OnInit } from '@angular/core'
import { Product } from 'src/shared/product.model'

@Component({
  selector: 'app-product',
  templateUrl: './product.component.html',
  styleUrls: ['./product.component.css']
})
export class ProductComponent implements OnInit {

  storeProducts: Product[] = [];

  constructor () {}

  ngOnInit (): void {}

  onAddNewProduct (newProduct: Product) {
    this.storeProducts.push(newProduct)
    console.log(this.storeProducts)
  }
  
}



- Now the data is successfully recieved from ProductCreate to Product.ts file and stored in the variable called
  storeProducts which is basically an array holding all Product objects that are created.

- Now we need to pass this data from this variable to ProductList's ts file.

- So we use day-2 logic of passing from Product html file by making changes on ProductList selector tag variable
  and recieving it in ProductList ts file using @Input.


Product.component.html:
-----------------------

- <app-productlist [productList]="storeProducts"></app-productlist> // changes done here

- <app-productcreate (addProductEvent)="onAddNewProduct($event)"></app-productcreate> // already existing line


ProductList.component.ts:
-------------------------

- We comment out the existing hard-coded product objects and initialize it using @Input()

- @Input() productList: Product[];

- Now the data is finally present in our required component ts file inside productList[] array;

- Hence we simply make use of it in ProductList html file and render the desired output.